name: Build and Publish Docker Image

on:
  push:
    tags:
      - 'v*'  # Trigger only when a tag starting with 'v' is pushed
    branches:
      - master
      - main
      - develop
      - feature/*
jobs:
  compile:
    runs-on: ubuntu-latest
    name: build-and-push
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Set repository name as environment variable
        run: echo "REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)" >> $GITHUB_ENV
#      - name: Set up Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version: '16'
#      - name: Install dependencies
#        run: npm install
#
#      - name: Build React app
#        run: npm run build

      - name: Set version variable
        id: set-version
        # 根据构建时间设置版本号
        run: |
          export TZ='Asia/Shanghai'
          echo "VERSION=${{ github.run_number }}_$(TZ='Asia/Shanghai' date +'%Y%m%d%H%M')_$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      # 登录Docker Hub
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      # build 镜像并push到仓库中
#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ./Dockerfile
#          platforms: linux/amd64,linux/arm64
#          push: true
#          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.VERSION }},${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPO_NAME }}:latest
      - name: Login to alibaba
        uses: docker/login-action@v3
        with:
          username: ${{ vars.ALI_DOCKER_USERNAME }}
          password: ${{ secrets.ALI_DOCKER_ACCESS_TOKEN }}
          registry: ${{ vars.ALI_DOCKER_REGISTRY }}
      - name: Build and push
        id: push_to_aliyun
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64 #,linux/arm64
          push: true
          tags: ${{ vars.ALI_DOCKER_REGISTRY }}/${{ vars.ALI_DOCKER_NAMESPACE }}/${{ env.REPO_NAME }}:${{ env.VERSION }},${{ vars.ALI_DOCKER_REGISTRY }}/${{ vars.ALI_DOCKER_NAMESPACE }}/${{ env.REPO_NAME }}:latest
#      - name: Update kustomization.yaml with new image
#        run: |
#          sed -i "s@newTag:.*@newTag: ${{ env.VERSION }}@g" k8s/overlays/dev/kustomization.yaml
#      - name: Commit updated kustomization.yaml
#        run: |
#          git config --global user.name "github-actions[bot]"
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git add k8s/overlays/dev/kustomization.yaml
#          git commit -m "Update image tag to ${{ env.VERSION }}"
#      - name: Push changes to the current branch
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          BRANCH=$(echo $GITHUB_REF | sed 's@refs/heads/@@')
#          git push origin $BRANCH
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
      - name: Sync ArgoCD Application
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}  # ArgoCD 服务器地址
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}    # ArgoCD API token
          ARGOCD_APP_NAME: ${{ env.REPO_NAME }}-${{ env.NAMESPACE }} # 需要同步的应用名称
          IMAGE_NAME: ${{ vars.ALI_DOCKER_REGISTRY }}/${{ vars.ALI_DOCKER_NAMESPACE }}/${{ env.REPO_NAME }} # 需要同步的应用名称
        run: |
          argocd app set $ARGOCD_APP_NAME --kustomize-image $IMAGE_NAME=$IMAGE_NAME:${{ env.VERSION }} --server $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --insecure --grpc-web
          argocd app sync $ARGOCD_APP_NAME --server $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --insecure --grpc-web
#      - name: upgrade app deployment with new image
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USER_NAME }}
#          port: ${{ secrets.SSH_PORT }}
#          key: ${{ secrets.SSH_KEY }}
#          sync: true # 在多個主機上同步執行
#          script_stop: true
#          script: |
#            echo "${{ env.VERSION }}"
#            ls -al
#            kubectl set image deployment/${{ env.REPO_NAME }} ${{ env.REPO_NAME }}=${{ vars.ALI_DOCKER_REGISTRY }}/${{ vars.ALI_DOCKER_NAMESPACE }}/${{ env.REPO_NAME }}:${{ env.VERSION }}
